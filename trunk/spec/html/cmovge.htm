<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
<HTML>
<HEAD>
<TITLE>80386 Programmer's Reference Manual -- Opcode CMOVGE</TITLE>
</HEAD>
<BODY>
<B>up:</B> <A HREF="c17.htm">
Chapter 17 -- 80386 Instruction Set</A><BR>
<B>prev:</B><A HREF="IRET.htm"> IRET/IRETD Interrupt Return</A><BR>
<B>next:</B><A HREF="JMP.htm"> JMP Jump</A>
<P>
<HR>
<P>
<H1>CMOVGE -- Move if greater or equal (SF=OF)</H1>


<PRE>
Opcode         Instruction       Clocks   Description

0F  4D  /r     CMOVGE r16,r/m16  7+m,3    xxxxxxxxxxxxxxxxxxxxxxx
0F  4D  /r     CMOVGE r32,r/m32  7+m,3    xxxxxxxxxxxxxxxxxxxxxxx
</PRE>

<EM>
<H3>Notes</H3>
  The first clock count is for the true condition (branch taken); the
  second clock count is for the false condition (branch not taken). rel16/32
  indicates that these instructions map to two; one with a 16-bit relative
  displacement, the other with a 32-bit relative displacement, depending on
  the operand-size attribute of the instruction.
</EM>

<H2>Operation</H2>

<PRE>
IF condition
THEN
   EIP := EIP + SignExtend(rel8/16/32);
   IF OperandSize = 16
   THEN EIP := EIP AND 0000FFFFH;
   FI;
FI;
</PRE>

<H2>Description</H2>

Conditional jumps (except JCXZ) test the flags which have been set by
a previous instruction. The conditions for each mnemonic are given in
parentheses after each description above. The terms "less" and "greater"
are used for comparisons of signed integers; "above" and "below" are
used for unsigned integers.
<P>
If the given condition is true, a jump is made to the location provided as
the operand. Instruction coding is most efficient when the target for the
conditional jump is in the current code segment and within -128 to
+127 bytes of the next instruction's first byte. The jump can also target
-32768 thru +32767 (segment size attribute 16) or -2^(31) thru +2^(31) -1
(segment size attribute 32) relative to the next instruction's first byte.
When the target for the conditional jump is in a different segment, use
the opposite case of the jump instruction (i.e., JE and JNE), and then
access the target with an unconditional far jump to the other segment.
For example, you cannot code--
<PRE>
JZ FARLABEL;
</PRE>
You must instead code--
<PRE>
   JNZ BEYOND;
   JMP FARLABEL;
BEYOND:
</PRE>
Because there can be several ways to interpret a particular state of the
flags, ASM386 provides more than one mnemonic for most of the
conditional jump opcodes. For example, if you compared two characters in
AX and want to jump if they are equal, use JE; or, if you ANDed AX
with a bit field mask and only want to jump if the result is 0, use JZ, a
synonym for JE.
<P>
JCXZ differs from other conditional jumps because it tests the contents of
the CX or ECX register for 0, not the flags. JCXZ is useful at the beginning
of a conditional loop that terminates with a conditional loop instruction
(such as
<A HREF="LOOP.htm">LOOPNE</A>
TARGET LABEL). The JCXZ prevents entering the loop with CX or
ECX equal to zero, which would cause the loop to execute 64K or 32G times
instead of zero times.

<H2>Flags Affected</H2>

None

<H2>Protected Mode Exceptions</H2>

#GP(0) if the offset jumped to is beyond the limits of the code segment

<H2>Real Address Mode Exceptions</H2>

None

<H2>Virtual 8086 Mode Exceptions</H2>

None


<P>
<HR>
<P>
<B>up:</B> <A HREF="c17.htm">
Chapter 17 -- 80386 Instruction Set</A><BR>
<B>prev:</B><A HREF="IRET.htm"> IRET/IRETD Interrupt Return</A><BR>
<B>next:</B><A HREF="JMP.htm"> JMP Jump</A>
</BODY>
