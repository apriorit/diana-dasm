#include "test_x64_integrated.h"
extern "C"
{
#include "diana_streams.h"
#include "diana_gen.h"
}
#include "test_common.h"


static const TestEntry_Name g_Names[] = {
{"mov",  3}, //    mov     rax,rsp
{"mov",  4}, //    mov     [rax+0x8],rbx
{"mov",  4}, //    mov     [rax+0x10],rsi
{"mov",  4}, //    mov     [rax+0x18],rdi
{"mov",  4}, //    mov     [rax+0x20],r12
{"push",  2}, //    push    r13
{"push",  2}, //    push    r14
{"push",  2}, //    push    r15
{"sub",  7}, //    sub     rsp,0x1c0
{"mov",  3}, //    mov     rdi,r8
{"mov",  3}, //    mov     rbx,rdx
{"mov",  3}, //    mov     rsi,rcx
{"xor",  3}, //    xor     r14d,r14d
{"mov",  3}, //    mov     r15,r14
{"mov",  9}, //    mov rax,gs:[nt!KiInitialPCR+0x188 (00000188)]
{"mov",  7}, //    mov     r12b,[rax+0x1f6]
{"cmp",  3}, //    cmp     r12b,r14b
{"je",  6}, //    je nt!NtCreatePagingFile+0xd5 (fffff80002d27a28)
{"mov",  3}, //    mov     dl,r12b
{"mov",  7}, //    mov rcx,[nt!SeCreatePagefilePrivilege (fffff80002d863a0)]
{"call",  5}, //    call nt!SeSinglePrivilegeCheck (fffff80002b83a58)
{"cmp",  3}, //    cmp     al,r14b
{"jne",  2}, //    jnz nt!NtCreatePagingFile+0x66 (fffff80002d279b6)
{"mov",  5}, //    mov     eax,0xc0000061
{"jmp",  5}, //    jmp nt!NtCreatePagingFile+0xccd (fffff80002d28620)
{"mov",  6}, //    mov     r13d,0x3
{"test",  3}, //    test    r13b,sil
{"je",  2}, //    je nt!NtCreatePagingFile+0x76 (fffff80002d279c7)
{"call",  5}, //    call nt!ExRaiseDatatypeMisalignment (fffff80002c46a20)
{"int",  1}, //    int     3
{"mov",  3}, //    mov     rcx,rsi
{"mov",  7}, //    mov rax,[nt!MmUserProbeAddress (fffff80002af4000)]
{"cmp",  3}, //    cmp     rsi,rax
{"cmovae",  4}, //    cmovae  rcx,rax
{"mov",  2}, //    mov     al,[rcx]
{"test",  3}, //    test    r13b,dil
{"je",  2}, //    je nt!NtCreatePagingFile+0x93 (fffff80002d279e5)
{"call",  5}, //    call nt!ExRaiseDatatypeMisalignment (fffff80002c46a20)
{"int",  1}, //    int     3
{"mov",  3}, //    mov     rcx,rdi
{"mov",  7}, //    mov rax,[nt!MmUserProbeAddress (fffff80002af4000)]
{"cmp",  3}, //    cmp     rdi,rax
{"cmovae",  4}, //    cmovae  rcx,rax
{"mov",  2}, //    mov     al,[rcx]
{"test",  3}, //    test    r13b,bl
{"je",  2}, //    je nt!NtCreatePagingFile+0xb0 (fffff80002d27a03)
{"call",  5}, //    call nt!ExRaiseDatatypeMisalignment (fffff80002c46a20)
{"int",  1}, //    int     3
{"mov",  3}, //    mov     rcx,rbx
{"mov",  7}, //    mov rax,[nt!MmUserProbeAddress (fffff80002af4000)]
{"cmp",  3}, //    cmp     rbx,rax
{"cmovae",  4}, //    cmovae  rcx,rax
{"mov",  2}, //    mov     al,[rcx]
{"mov",  3}, //    mov     rbx,[rbx]
{"mov",  8}, //    mov     [rsp+0xa0],rbx
{"jmp",  2}, //    jmp nt!NtCreatePagingFile+0xe6 (fffff80002d27a39)
{"jmp",  5}, //    jmp nt!NtCreatePagingFile+0xccd (fffff80002d28620)
{"mov",  3}, //    mov     rbx,[rdx]
{"mov",  8}, //    mov     [rsp+0xa0],rbx
{"mov",  6}, //    mov     r13d,0x3
{"mov",  10}, //    mov rax,0xffffffff000
{"cmp",  3}, //    cmp     rbx,rax
{"ja",  6}, //    ja nt!NtCreatePagingFile+0xcc8 (fffff80002d2861b)
{"cmp",  7}, //    cmp     rbx,0x100000
{"jl",  6}, //    jl nt!NtCreatePagingFile+0xcc8 (fffff80002d2861b)
{"cmp",  3}, //    cmp     r12b,r14b
{"je",  2}, //    je nt!NtCreatePagingFile+0x11d (fffff80002d27a70)
{"mov",  3}, //    mov     rdi,[rdi]
{"mov",  8}, //    mov     [rsp+0xc8],rdi
{"jmp",  2}, //    jmp nt!NtCreatePagingFile+0x128 (fffff80002d27a7b)
{"jmp",  5}, //    jmp nt!NtCreatePagingFile+0xccd (fffff80002d28620)
{"mov",  3}, //    mov     rdi,[rdi]
{"mov",  8}, //    mov     [rsp+0xc8],rdi
{"cmp",  3}, //    cmp     rdi,rax
{"jbe",  2}, //    jbe nt!NtCreatePagingFile+0x137 (fffff80002d27a8a)
{"mov",  5}, //    mov     eax,0xc00000f1
{"jmp",  5}, //    jmp nt!NtCreatePagingFile+0xccd (fffff80002d28620)
{"cmp",  3}, //    cmp     rbx,rdi
{"jle",  2}, //    jle nt!NtCreatePagingFile+0x146 (fffff80002d27a99)
{"mov",  5}, //    mov     eax,0xc00000f1
{"jmp",  5}, //    jmp nt!NtCreatePagingFile+0xccd (fffff80002d28620)
{"cmp",  3}, //    cmp     r12b,r14b
{"je",  2}, //    je nt!NtCreatePagingFile+0x15f (fffff80002d27ab2)
{"movdqu",  4}, //    movdqu  xmm0,oword ptr [rsi]
{"movdqu",  9}, //    movdqu oword ptr [rsp+0x88],xmm0
{"jmp",  2}, //    jmp nt!NtCreatePagingFile+0x16c (fffff80002d27abf)
{"jmp",  5}, //    jmp nt!NtCreatePagingFile+0xccd (fffff80002d28620)
{"movdqu",  4}, //    movdqu  xmm0,oword ptr [rsi]
{"movdqu",  9}, //    movdqu oword ptr [rsp+0x88],xmm0
{"movzx",  8}, //    movzx   eax,word ptr [rsp+0x88]
{"mov",  8}, //    mov     [rsp+0x8a],ax
{"cmp",  4}, //    cmp     ax,r14w
{"je",  6}, //    je nt!NtCreatePagingFile+0xcc1 (fffff80002d28614)
{"mov",  5}, //    mov     ecx,0x100
{"cmp",  3}, //    cmp     ax,cx
{"ja",  6}, //    ja nt!NtCreatePagingFile+0xcc1 (fffff80002d28614)
{"movzx",  3}, //    movzx   edx,ax
{"mov",  5}, //    mov     esi,0x1
{"mov",  6}, //    mov     r8d,0x20206d4d
{"mov",  2}, //    mov     ecx,esi
{"call",  5}, //    call nt!ExAllocatePoolWithTag (fffff800029f03d0)
{"mov",  3}, //    mov     r14,rax
{"mov",  8}, //    mov     [rsp+0x80],rax
{"xor",  3}, //    xor     r9d,r9d
{"cmp",  3}, //    cmp     rax,r9
{"jne",  2}, //    jnz nt!NtCreatePagingFile+0x1c6 (fffff80002d27b19)
{"mov",  5}, //    mov     eax,0xc000009a
{"jmp",  5}, //    jmp nt!NtCreatePagingFile+0xccd (fffff80002d28620)
{"cmp",  3}, //    cmp     r12b,r9b
{"je",  2}, //    je nt!NtCreatePagingFile+0x23d (fffff80002d27b90)
{"movzx",  8}, //    movzx   ecx,word ptr [rsp+0x88]
{"cmp",  4}, //    cmp     cx,r9w
{"je",  2}, //    je nt!NtCreatePagingFile+0x20e (fffff80002d27b61)
{"movzx",  4}, //    movzx   r8d,cx
{"mov",  8}, //    mov     rdx,[rsp+0x90]
{"add",  3}, //    add     r8,rdx
{"mov",  7}, //    mov rax,[nt!MmUserProbeAddress (fffff80002af4000)]
{"cmp",  3}, //    cmp     r8,rax
{"ja",  2}, //    ja nt!NtCreatePagingFile+0x1f9 (fffff80002d27b4c)
{"cmp",  3}, //    cmp     r8,rdx
{"jae",  2}, //    jnb nt!NtCreatePagingFile+0x216 (fffff80002d27b69)
{"mov",  3}, //    mov     [rax],r9b
{"mov",  8}, //    mov     rdx,[rsp+0x90]
{"mov",  2}, //    mov     esi,eax
{"cmp",  2}, //    cmp     eax,ebx
{"jl",  6}, //    jl nt!NtCreatePagingFile+0xc19 (fffff80002d2856c)
{"test",  8}, //    test    byte ptr [rsp+0xf4],0x4
{"je",  2}, //    je nt!NtCreatePagingFile+0x564 (fffff80002d27eb7)
{"mov",  5}, //    mov     esi,0xc0000164
{"jmp",  5}, //    jmp nt!NtCreatePagingFile+0xc19 (fffff80002d2856c)
{"mov",  3}, //    mov     rcx,r12
{"call",  5}, //    call nt!PpPagePathAssign (fffff80002cf6a50)
{"mov",  2}, //    mov     esi,eax
{"cmp",  2}, //    cmp     eax,ebx
{"jl",  6}, //    jl nt!NtCreatePagingFile+0xc19 (fffff80002d2856c)
{"mov",  5}, //    mov     eax,0x1
{"mov",  7}, //    mov     [rsp+0x98],eax
{"lea",  7}, //    lea r8,[nt!FILE_TYPE_NOTIFICATION_GUID_PAGE_FILE (fffff80002a006f0)]
{"mov",  2}, //    mov     edx,eax
{"mov",  3}, //    mov     rcx,r12
{"call",  5}, //    call nt!FsRtlIssueFileNotificationFsctl (fffff80002cacca0)
{"mov",  3}, //    mov     rcx,r12
{"call",  5}, //    call nt!MiZeroPageFileFirstPage (fffff80002cab5c0)
{"mov",  2}, //    mov     esi,eax
{"cmp",  2}, //    cmp     eax,ebx
{"jl",  6}, //    jl nt!NtCreatePagingFile+0xc19 (fffff80002d2856c)
{"mov",  5}, //    mov     esi,0x90
{"mov",  6}, //    mov     r8d,0x20206d4d
{"mov",  3}, //    mov     rdx,rsi
{"xor",  2}, //    xor     ecx,ecx
{"call",  5}, //    call nt!ExAllocatePoolWithTag (fffff800029f03d0)
{"mov",  3}, //    mov     rbx,rax
{"test",  3}, //    test    rax,rax
{"jne",  2}, //    jnz nt!NtCreatePagingFile+0x5cc (fffff80002d27f1f)
{"mov",  5}, //    mov     esi,0xc000009a
{"jmp",  5}, //    jmp nt!NtCreatePagingFile+0xc19 (fffff80002d2856c)
{"mov",  3}, //    mov     r8,rsi
{"xor",  2}, //    xor     edx,edx
{"mov",  3}, //    mov     rcx,rax
{"call",  5}, //    call    nt!memset (fffff800028c0080)
{"mov",  4}, //    mov     [rbx+0x30],r12
{"mov",  5}, //    mov     rax,[rsp+0x78]
{"mov",  4}, //    mov     [rbx+0x78],rax
{"mov",  8}, //    mov     rax,[rsp+0xa0]
{"sar",  4}, //    sar     rax,0xc
{"mov",  3}, //    mov     [rbx],rax
{"mov",  4}, //    mov     [rbx+0x10],rax
{"dec",  3}, //    dec     rax
{"mov",  4}, //    mov     [rbx+0x18],rax
{"sar",  4}, //    sar     rdi,0xc
{"mov",  4}, //    mov     [rbx+0x8],rdi
{"xor",  2}, //    xor     edi,edi
{"xor",  3}, //    xor     r13d,r13d
{"lea",  4}, //    lea     r12,[rbx+0x38]
{"mov",  3}, //    mov     rsi,r12
{"mov",  5}, //    mov     edx,0x8a0
{"xor",  2}, //    xor     ecx,ecx
{"mov",  6}, //    mov     r8d,0x20206d4d
{"call",  5}, //    call      nt!ExAllocatePoolWithTag (fffff800029f03d0)
{"mov",  3}, //    mov     [rsi],rax
{"test",  3}, //    test    rax,rax
{"je",  6}, //    je nt!NtCreatePagingFile+0x79d (fffff80002d280f0)
{"xor",  2}, //    xor     edx,edx
{"mov",  6}, //    mov     r8d,0xa0
{"mov",  3}, //    mov     rcx,rax
{"call",  5}, //    call    nt!memset (fffff800028c0080)
{"mov",  3}, //    mov     r11,[rsi]
{"mov",  4}, //    mov     [r11+0x30],rbx
{"mov",  5}, //    mov     eax,0x1
{"add",  2}, //    add     edi,eax
{"add",  3}, //    add     r13,rax
{"add",  4}, //    add     rsi,0x8
{"cmp",  3}, //    cmp     edi,r14d
{"", 0}};
static const unsigned char g_Data[] = {
 0x48, 0x8b, 0xc4//    mov     rax,rsp
, 0x48, 0x89, 0x58, 0x08//    mov     [rax+0x8],rbx
, 0x48, 0x89, 0x70, 0x10//    mov     [rax+0x10],rsi
, 0x48, 0x89, 0x78, 0x18//    mov     [rax+0x18],rdi
, 0x4c, 0x89, 0x60, 0x20//    mov     [rax+0x20],r12
, 0x41, 0x55//    push    r13
, 0x41, 0x56//    push    r14
, 0x41, 0x57//    push    r15
, 0x48, 0x81, 0xec, 0xc0, 0x01, 0x00, 0x00//    sub     rsp,0x1c0
, 0x49, 0x8b, 0xf8//    mov     rdi,r8
, 0x48, 0x8b, 0xda//    mov     rbx,rdx
, 0x48, 0x8b, 0xf1//    mov     rsi,rcx
, 0x45, 0x33, 0xf6//    xor     r14d,r14d
, 0x4d, 0x8b, 0xfe//    mov     r15,r14
, 0x65, 0x48, 0x8b, 0x04, 0x25, 0x88, 0x01, 0x00, 0x00//    mov rax,gs:[nt!KiInitialPCR+0x188 (00000188)]
, 0x44, 0x8a, 0xa0, 0xf6, 0x01, 0x00, 0x00//    mov     r12b,[rax+0x1f6]
, 0x45, 0x3a, 0xe6//    cmp     r12b,r14b
, 0x0f, 0x84, 0x90, 0x00, 0x00, 0x00//    je nt!NtCreatePagingFile+0xd5 (fffff80002d27a28)
, 0x41, 0x8a, 0xd4//    mov     dl,r12b
, 0x48, 0x8b, 0x0d, 0xfe, 0xe9, 0x05, 0x00//    mov rcx,[nt!SeCreatePagefilePrivilege (fffff80002d863a0)]
, 0xe8, 0xb1, 0xc0, 0xe5, 0xff//    call nt!SeSinglePrivilegeCheck (fffff80002b83a58)
, 0x41, 0x3a, 0xc6//    cmp     al,r14b
, 0x75, 0x0a//    jnz nt!NtCreatePagingFile+0x66 (fffff80002d279b6)
, 0xb8, 0x61, 0x00, 0x00, 0xc0//    mov     eax,0xc0000061
, 0xe9, 0x6a, 0x0c, 0x00, 0x00//    jmp nt!NtCreatePagingFile+0xccd (fffff80002d28620)
, 0x41, 0xbd, 0x03, 0x00, 0x00, 0x00//    mov     r13d,0x3
, 0x41, 0x84, 0xf5//    test    r13b,sil
, 0x74, 0x06//    je nt!NtCreatePagingFile+0x76 (fffff80002d279c7)
, 0xe8, 0x5a, 0xf0, 0xf1, 0xff//    call nt!ExRaiseDatatypeMisalignment (fffff80002c46a20)
, 0xcc//    int     3
, 0x48, 0x8b, 0xce//    mov     rcx,rsi
, 0x48, 0x8b, 0x05, 0x2f, 0xc6, 0xdc, 0xff//    mov rax,[nt!MmUserProbeAddress (fffff80002af4000)]
, 0x48, 0x3b, 0xf0//    cmp     rsi,rax
, 0x48, 0x0f, 0x43, 0xc8//    cmovae  rcx,rax
, 0x8a, 0x01//    mov     al,[rcx]
, 0x41, 0x84, 0xfd//    test    r13b,dil
, 0x74, 0x06//    je nt!NtCreatePagingFile+0x93 (fffff80002d279e5)
, 0xe8, 0x3c, 0xf0, 0xf1, 0xff//    call nt!ExRaiseDatatypeMisalignment (fffff80002c46a20)
, 0xcc//    int     3
, 0x48, 0x8b, 0xcf//    mov     rcx,rdi
, 0x48, 0x8b, 0x05, 0x11, 0xc6, 0xdc, 0xff//    mov rax,[nt!MmUserProbeAddress (fffff80002af4000)]
, 0x48, 0x3b, 0xf8//    cmp     rdi,rax
, 0x48, 0x0f, 0x43, 0xc8//    cmovae  rcx,rax
, 0x8a, 0x01//    mov     al,[rcx]
, 0x41, 0x84, 0xdd//    test    r13b,bl
, 0x74, 0x06//    je nt!NtCreatePagingFile+0xb0 (fffff80002d27a03)
, 0xe8, 0x1e, 0xf0, 0xf1, 0xff//    call nt!ExRaiseDatatypeMisalignment (fffff80002c46a20)
, 0xcc//    int     3
, 0x48, 0x8b, 0xcb//    mov     rcx,rbx
, 0x48, 0x8b, 0x05, 0xf3, 0xc5, 0xdc, 0xff//    mov rax,[nt!MmUserProbeAddress (fffff80002af4000)]
, 0x48, 0x3b, 0xd8//    cmp     rbx,rax
, 0x48, 0x0f, 0x43, 0xc8//    cmovae  rcx,rax
, 0x8a, 0x01//    mov     al,[rcx]
, 0x48, 0x8b, 0x1b//    mov     rbx,[rbx]
, 0x48, 0x89, 0x9c, 0x24, 0xa0, 0x00, 0x00, 0x00//    mov     [rsp+0xa0],rbx
, 0xeb, 0x16//    jmp nt!NtCreatePagingFile+0xe6 (fffff80002d27a39)
, 0xe9, 0xf8, 0x0b, 0x00, 0x00//    jmp nt!NtCreatePagingFile+0xccd (fffff80002d28620)
, 0x48, 0x8b, 0x1a//    mov     rbx,[rdx]
, 0x48, 0x89, 0x9c, 0x24, 0xa0, 0x00, 0x00, 0x00//    mov     [rsp+0xa0],rbx
, 0x41, 0xbd, 0x03, 0x00, 0x00, 0x00//    mov     r13d,0x3
, 0x48, 0xb8, 0x00, 0xf0, 0xff, 0xff, 0xff, 0x0f, 0x00, 0x00//    mov rax,0xffffffff000
, 0x48, 0x3b, 0xd8//    cmp     rbx,rax
, 0x0f, 0x87, 0xcf, 0x0b, 0x00, 0x00//    ja nt!NtCreatePagingFile+0xcc8 (fffff80002d2861b)
, 0x48, 0x81, 0xfb, 0x00, 0x00, 0x10, 0x00//    cmp     rbx,0x100000
, 0x0f, 0x8c, 0xc2, 0x0b, 0x00, 0x00//    jl nt!NtCreatePagingFile+0xcc8 (fffff80002d2861b)
, 0x45, 0x3a, 0xe6//    cmp     r12b,r14b
, 0x74, 0x12//    je nt!NtCreatePagingFile+0x11d (fffff80002d27a70)
, 0x48, 0x8b, 0x3f//    mov     rdi,[rdi]
, 0x48, 0x89, 0xbc, 0x24, 0xc8, 0x00, 0x00, 0x00//    mov     [rsp+0xc8],rdi
, 0xeb, 0x10//    jmp nt!NtCreatePagingFile+0x128 (fffff80002d27a7b)
, 0xe9, 0xb0, 0x0b, 0x00, 0x00//    jmp nt!NtCreatePagingFile+0xccd (fffff80002d28620)
, 0x48, 0x8b, 0x3f//    mov     rdi,[rdi]
, 0x48, 0x89, 0xbc, 0x24, 0xc8, 0x00, 0x00, 0x00//    mov     [rsp+0xc8],rdi
, 0x48, 0x3b, 0xf8//    cmp     rdi,rax
, 0x76, 0x0a//    jbe nt!NtCreatePagingFile+0x137 (fffff80002d27a8a)
, 0xb8, 0xf1, 0x00, 0x00, 0xc0//    mov     eax,0xc00000f1
, 0xe9, 0x96, 0x0b, 0x00, 0x00//    jmp nt!NtCreatePagingFile+0xccd (fffff80002d28620)
, 0x48, 0x3b, 0xdf//    cmp     rbx,rdi
, 0x7e, 0x0a//    jle nt!NtCreatePagingFile+0x146 (fffff80002d27a99)
, 0xb8, 0xf1, 0x00, 0x00, 0xc0//    mov     eax,0xc00000f1
, 0xe9, 0x87, 0x0b, 0x00, 0x00//    jmp nt!NtCreatePagingFile+0xccd (fffff80002d28620)
, 0x45, 0x3a, 0xe6//    cmp     r12b,r14b
, 0x74, 0x14//    je nt!NtCreatePagingFile+0x15f (fffff80002d27ab2)
, 0xf3, 0x0f, 0x6f, 0x06//    movdqu  xmm0,oword ptr [rsi]
, 0xf3, 0x0f, 0x7f, 0x84, 0x24, 0x88, 0x00, 0x00, 0x00//    movdqu oword ptr [rsp+0x88],xmm0
, 0xeb, 0x12//    jmp nt!NtCreatePagingFile+0x16c (fffff80002d27abf)
, 0xe9, 0x6e, 0x0b, 0x00, 0x00//    jmp nt!NtCreatePagingFile+0xccd (fffff80002d28620)
, 0xf3, 0x0f, 0x6f, 0x06//    movdqu  xmm0,oword ptr [rsi]
, 0xf3, 0x0f, 0x7f, 0x84, 0x24, 0x88, 0x00, 0x00, 0x00//    movdqu oword ptr [rsp+0x88],xmm0
, 0x0f, 0xb7, 0x84, 0x24, 0x88, 0x00, 0x00, 0x00//    movzx   eax,word ptr [rsp+0x88]
, 0x66, 0x89, 0x84, 0x24, 0x8a, 0x00, 0x00, 0x00//    mov     [rsp+0x8a],ax
, 0x66, 0x41, 0x3b, 0xc6//    cmp     ax,r14w
, 0x0f, 0x84, 0x3b, 0x0b, 0x00, 0x00//    je nt!NtCreatePagingFile+0xcc1 (fffff80002d28614)
, 0xb9, 0x00, 0x01, 0x00, 0x00//    mov     ecx,0x100
, 0x66, 0x3b, 0xc1//    cmp     ax,cx
, 0x0f, 0x87, 0x2d, 0x0b, 0x00, 0x00//    ja nt!NtCreatePagingFile+0xcc1 (fffff80002d28614)
, 0x0f, 0xb7, 0xd0//    movzx   edx,ax
, 0xbe, 0x01, 0x00, 0x00, 0x00//    mov     esi,0x1
, 0x41, 0xb8, 0x4d, 0x6d, 0x20, 0x20//    mov     r8d,0x20206d4d
, 0x8b, 0xce//    mov     ecx,esi
, 0xe8, 0xd4, 0x88, 0xcc, 0xff//    call nt!ExAllocatePoolWithTag (fffff800029f03d0)
, 0x4c, 0x8b, 0xf0//    mov     r14,rax
, 0x48, 0x89, 0x84, 0x24, 0x80, 0x00, 0x00, 0x00//    mov     [rsp+0x80],rax
, 0x45, 0x33, 0xc9//    xor     r9d,r9d
, 0x49, 0x3b, 0xc1//    cmp     rax,r9
, 0x75, 0x0a//    jnz nt!NtCreatePagingFile+0x1c6 (fffff80002d27b19)
, 0xb8, 0x9a, 0x00, 0x00, 0xc0//    mov     eax,0xc000009a
, 0xe9, 0x07, 0x0b, 0x00, 0x00//    jmp nt!NtCreatePagingFile+0xccd (fffff80002d28620)
, 0x45, 0x3a, 0xe1//    cmp     r12b,r9b
, 0x74, 0x72//    je nt!NtCreatePagingFile+0x23d (fffff80002d27b90)
, 0x0f, 0xb7, 0x8c, 0x24, 0x88, 0x00, 0x00, 0x00//    movzx   ecx,word ptr [rsp+0x88]
, 0x66, 0x41, 0x3b, 0xc9//    cmp     cx,r9w
, 0x74, 0x35//    je nt!NtCreatePagingFile+0x20e (fffff80002d27b61)
, 0x44, 0x0f, 0xb7, 0xc1//    movzx   r8d,cx
, 0x48, 0x8b, 0x94, 0x24, 0x90, 0x00, 0x00, 0x00//    mov     rdx,[rsp+0x90]
, 0x4c, 0x03, 0xc2//    add     r8,rdx
, 0x48, 0x8b, 0x05, 0xbe, 0xc4, 0xdc, 0xff//    mov rax,[nt!MmUserProbeAddress (fffff80002af4000)]
, 0x4c, 0x3b, 0xc0//    cmp     r8,rax
, 0x77, 0x05//    ja nt!NtCreatePagingFile+0x1f9 (fffff80002d27b4c)
, 0x4c, 0x3b, 0xc2//    cmp     r8,rdx
, 0x73, 0x1d//    jnb nt!NtCreatePagingFile+0x216 (fffff80002d27b69)
, 0x44, 0x88, 0x08//    mov     [rax],r9b
, 0x48, 0x8b, 0x94, 0x24, 0x90, 0x00, 0x00, 0x00//    mov     rdx,[rsp+0x90]
, 0x8b, 0xf0//    mov     esi,eax
, 0x3b, 0xc3//    cmp     eax,ebx
, 0x0f, 0x8c, 0xc9, 0x06, 0x00, 0x00//    jl nt!NtCreatePagingFile+0xc19 (fffff80002d2856c)
, 0xf6, 0x84, 0x24, 0xf4, 0x00, 0x00, 0x00, 0x04//    test    byte ptr [rsp+0xf4],0x4
, 0x74, 0x0a//    je nt!NtCreatePagingFile+0x564 (fffff80002d27eb7)
, 0xbe, 0x64, 0x01, 0x00, 0xc0//    mov     esi,0xc0000164
, 0xe9, 0xb5, 0x06, 0x00, 0x00//    jmp nt!NtCreatePagingFile+0xc19 (fffff80002d2856c)
, 0x49, 0x8b, 0xcc//    mov     rcx,r12
, 0xe8, 0x91, 0xeb, 0xfc, 0xff//    call nt!PpPagePathAssign (fffff80002cf6a50)
, 0x8b, 0xf0//    mov     esi,eax
, 0x3b, 0xc3//    cmp     eax,ebx
, 0x0f, 0x8c, 0xa3, 0x06, 0x00, 0x00//    jl nt!NtCreatePagingFile+0xc19 (fffff80002d2856c)
, 0xb8, 0x01, 0x00, 0x00, 0x00//    mov     eax,0x1
, 0x89, 0x84, 0x24, 0x98, 0x00, 0x00, 0x00//    mov     [rsp+0x98],eax
, 0x4c, 0x8d, 0x05, 0x14, 0x88, 0xcd, 0xff//    lea r8,[nt!FILE_TYPE_NOTIFICATION_GUID_PAGE_FILE (fffff80002a006f0)]
, 0x8b, 0xd0//    mov     edx,eax
, 0x49, 0x8b, 0xcc//    mov     rcx,r12
, 0xe8, 0xba, 0x4d, 0xf8, 0xff//    call nt!FsRtlIssueFileNotificationFsctl (fffff80002cacca0)
, 0x49, 0x8b, 0xcc//    mov     rcx,r12
, 0xe8, 0xd2, 0x36, 0xf8, 0xff//    call nt!MiZeroPageFileFirstPage (fffff80002cab5c0)
, 0x8b, 0xf0//    mov     esi,eax
, 0x3b, 0xc3//    cmp     eax,ebx
, 0x0f, 0x8c, 0x74, 0x06, 0x00, 0x00//    jl nt!NtCreatePagingFile+0xc19 (fffff80002d2856c)
, 0xbe, 0x90, 0x00, 0x00, 0x00//    mov     esi,0x90
, 0x41, 0xb8, 0x4d, 0x6d, 0x20, 0x20//    mov     r8d,0x20206d4d
, 0x48, 0x8b, 0xd6//    mov     rdx,rsi
, 0x33, 0xc9//    xor     ecx,ecx
, 0xe8, 0xc3, 0x84, 0xcc, 0xff//    call nt!ExAllocatePoolWithTag (fffff800029f03d0)
, 0x48, 0x8b, 0xd8//    mov     rbx,rax
, 0x48, 0x85, 0xc0//    test    rax,rax
, 0x75, 0x0a//    jnz nt!NtCreatePagingFile+0x5cc (fffff80002d27f1f)
, 0xbe, 0x9a, 0x00, 0x00, 0xc0//    mov     esi,0xc000009a
, 0xe9, 0x4d, 0x06, 0x00, 0x00//    jmp nt!NtCreatePagingFile+0xc19 (fffff80002d2856c)
, 0x4c, 0x8b, 0xc6//    mov     r8,rsi
, 0x33, 0xd2//    xor     edx,edx
, 0x48, 0x8b, 0xc8//    mov     rcx,rax
, 0xe8, 0x54, 0x81, 0xb9, 0xff//    call    nt!memset (fffff800028c0080)
, 0x4c, 0x89, 0x63, 0x30//    mov     [rbx+0x30],r12
, 0x48, 0x8b, 0x44, 0x24, 0x78//    mov     rax,[rsp+0x78]
, 0x48, 0x89, 0x43, 0x78//    mov     [rbx+0x78],rax
, 0x48, 0x8b, 0x84, 0x24, 0xa0, 0x00, 0x00, 0x00//    mov     rax,[rsp+0xa0]
, 0x48, 0xc1, 0xf8, 0x0c//    sar     rax,0xc
, 0x48, 0x89, 0x03//    mov     [rbx],rax
, 0x48, 0x89, 0x43, 0x10//    mov     [rbx+0x10],rax
, 0x48, 0xff, 0xc8//    dec     rax
, 0x48, 0x89, 0x43, 0x18//    mov     [rbx+0x18],rax
, 0x48, 0xc1, 0xff, 0x0c//    sar     rdi,0xc
, 0x48, 0x89, 0x7b, 0x08//    mov     [rbx+0x8],rdi
, 0x33, 0xff//    xor     edi,edi
, 0x45, 0x33, 0xed//    xor     r13d,r13d
, 0x4c, 0x8d, 0x63, 0x38//    lea     r12,[rbx+0x38]
, 0x49, 0x8b, 0xf4//    mov     rsi,r12
, 0xba, 0xa0, 0x08, 0x00, 0x00//    mov     edx,0x8a0
, 0x33, 0xc9//    xor     ecx,ecx
, 0x41, 0xb8, 0x4d, 0x6d, 0x20, 0x20//    mov     r8d,0x20206d4d
, 0xe8, 0x57, 0x84, 0xcc, 0xff//    call      nt!ExAllocatePoolWithTag (fffff800029f03d0)
, 0x48, 0x89, 0x06//    mov     [rsi],rax
, 0x48, 0x85, 0xc0//    test    rax,rax
, 0x0f, 0x84, 0x6b, 0x01, 0x00, 0x00//    je nt!NtCreatePagingFile+0x79d (fffff80002d280f0)
, 0x33, 0xd2//    xor     edx,edx
, 0x41, 0xb8, 0xa0, 0x00, 0x00, 0x00//    mov     r8d,0xa0
, 0x48, 0x8b, 0xc8//    mov     rcx,rax
, 0xe8, 0xeb, 0x80, 0xb9, 0xff//    call    nt!memset (fffff800028c0080)
, 0x4c, 0x8b, 0x1e//    mov     r11,[rsi]
, 0x49, 0x89, 0x5b, 0x30//    mov     [r11+0x30],rbx
, 0xb8, 0x01, 0x00, 0x00, 0x00//    mov     eax,0x1
, 0x03, 0xf8//    add     edi,eax
, 0x4c, 0x03, 0xe8//    add     r13,rax
, 0x48, 0x83, 0xc6, 0x08//    add     rsi,0x8
, 0x41, 0x3b, 0xfe//    cmp     edi,r14d
};


static const TestEntry_Name g_Names2[] = {
{"mov",  3}, //    mov     [rcx],rdx
{"mov",  4}, //    mov     [rcx+0x8],rbx
{"mov",  4}, //    mov     [rcx+0x18],rbp
{"mov",  4}, //    mov     [rcx+0x20],rsi
{"mov",  4}, //    mov     [rcx+0x28],rdi
{"mov",  4}, //    mov     [rcx+0x30],r12
{"mov",  4}, //    mov     [rcx+0x38],r13
{"mov",  4}, //    mov     [rcx+0x40],r14
{"mov",  4}, //    mov     [rcx+0x48],r15
{"lea",  5}, //    lea     r8,[rsp+0x8]
{"mov",  4}, //    mov     [rcx+0x10],r8
{"mov",  4}, //    mov     r8,[rsp]
{"mov",  4}, //    mov     [rcx+0x50],r8
{"stmxcsr",  4}, //    stmxcsr dword ptr [rcx+0x58]
{"fnstcw",  3}, //    fstcw   [rcx+0x5c]
{"movdqa",  5}, //    movdqa  oword ptr [rcx+0x60],xmm6
{"movdqa",  5}, //    movdqa  oword ptr [rcx+0x70],xmm7
{"movdqa",  9}, //    movdqa oword ptr [rcx+0x80],xmm8
{"movdqa",  9}, //    movdqa oword ptr [rcx+0x90],xmm9
{"movdqa",  9}, //    movdqa oword ptr [rcx+0xa0],xmm10
{"movdqa",  9}, //    movdqa oword ptr [rcx+0xb0],xmm11
{"movdqa",  9}, //    movdqa oword ptr [rcx+0xc0],xmm12
{"movdqa",  9}, //    movdqa oword ptr [rcx+0xd0],xmm13
{"movdqa",  9}, //    movdqa oword ptr [rcx+0xe0],xmm14
{"movdqa",  9}, //    movdqa oword ptr [rcx+0xf0],xmm15
{"xor",  2}, //    xor     eax,eax
{"ret",  1}, //    ret
{"", 0}};
static const unsigned char g_Data2[] = {
 0x48, 0x89, 0x11//    mov     [rcx],rdx
, 0x48, 0x89, 0x59, 0x08//    mov     [rcx+0x8],rbx
, 0x48, 0x89, 0x69, 0x18//    mov     [rcx+0x18],rbp
, 0x48, 0x89, 0x71, 0x20//    mov     [rcx+0x20],rsi
, 0x48, 0x89, 0x79, 0x28//    mov     [rcx+0x28],rdi
, 0x4c, 0x89, 0x61, 0x30//    mov     [rcx+0x30],r12
, 0x4c, 0x89, 0x69, 0x38//    mov     [rcx+0x38],r13
, 0x4c, 0x89, 0x71, 0x40//    mov     [rcx+0x40],r14
, 0x4c, 0x89, 0x79, 0x48//    mov     [rcx+0x48],r15
, 0x4c, 0x8d, 0x44, 0x24, 0x08//    lea     r8,[rsp+0x8]
, 0x4c, 0x89, 0x41, 0x10//    mov     [rcx+0x10],r8
, 0x4c, 0x8b, 0x04, 0x24//    mov     r8,[rsp]
, 0x4c, 0x89, 0x41, 0x50//    mov     [rcx+0x50],r8
, 0x0f, 0xae, 0x59, 0x58//    stmxcsr dword ptr [rcx+0x58]
, 0xd9, 0x79, 0x5c//    fstcw   [rcx+0x5c]
, 0x66, 0x0f, 0x7f, 0x71, 0x60//    movdqa  oword ptr [rcx+0x60],xmm6
, 0x66, 0x0f, 0x7f, 0x79, 0x70//    movdqa  oword ptr [rcx+0x70],xmm7
, 0x66, 0x44, 0x0f, 0x7f, 0x81, 0x80, 0x00, 0x00, 0x00//    movdqa oword ptr [rcx+0x80],xmm8
, 0x66, 0x44, 0x0f, 0x7f, 0x89, 0x90, 0x00, 0x00, 0x00//    movdqa oword ptr [rcx+0x90],xmm9
, 0x66, 0x44, 0x0f, 0x7f, 0x91, 0xa0, 0x00, 0x00, 0x00//    movdqa oword ptr [rcx+0xa0],xmm10
, 0x66, 0x44, 0x0f, 0x7f, 0x99, 0xb0, 0x00, 0x00, 0x00//    movdqa oword ptr [rcx+0xb0],xmm11
, 0x66, 0x44, 0x0f, 0x7f, 0xa1, 0xc0, 0x00, 0x00, 0x00//    movdqa oword ptr [rcx+0xc0],xmm12
, 0x66, 0x44, 0x0f, 0x7f, 0xa9, 0xd0, 0x00, 0x00, 0x00//    movdqa oword ptr [rcx+0xd0],xmm13
, 0x66, 0x44, 0x0f, 0x7f, 0xb1, 0xe0, 0x00, 0x00, 0x00//    movdqa oword ptr [rcx+0xe0],xmm14
, 0x66, 0x44, 0x0f, 0x7f, 0xb9, 0xf0, 0x00, 0x00, 0x00//    movdqa oword ptr [rcx+0xf0],xmm15
, 0x33, 0xc0//    xor     eax,eax
, 0xc3//    ret
};


void test_x64_integrated_impl(const unsigned char * pData, 
                              size_t dataSize,
                              const TestEntry_Name * pNames)
{
    DianaGroupInfo * pGroupInfo=0;
    DianaParserResult result;
    
    int iRes = 0;

    DianaMemoryStream stream;
    DianaContext context;

    Diana_InitContext(&context, DIANA_MODE64);
    Diana_InitMemoryStream(&stream, (void*)pData, dataSize);

    // 1
    for(int i =0; ; ++i)
    {
        iRes = Diana_ParseCmd(&context, Diana_GetRootLine(), &stream.parent,  &result);
        if (iRes == DI_END)
            break;

        if (iRes)
        {
            Diana_FatalBreak();;
            break;
        }
        
        DianaGroupInfo * pGroupInfo = Diana_GetGroupInfo(result.pInfo->m_lGroupId);
        
        if (strcmp(pNames[i].pCmdName,  pGroupInfo->m_pName))
        {
            Diana_FatalBreak();;
            break;
        }

        if (pNames[i].iCmdSize != result.iFullCmdSize)
        {
            Diana_FatalBreak();;
        }
    }

}
static 
unsigned char g_testData3[]=
{0x75, 0x7D, 0x9A, 0x6E, 0x44, 0x70, 0x22, 0x0B, 0x73, 0xC9, 0x51, 0xB5, 0x35, 0xA1, 0x58, 0xEF,
0x88, 0x03, 0xF2, 0xD8, 0x60, 0x62, 0x89, 0x0C, 0x37, 0x55, 0x28, 0x85, 0x65, 0x7F, 0x21, 0xFD,
0x09, 0x7D, 0x38, 0x05, 0x84, 0x9F, 0x0A, 0x49, 0x87, 0xD4, 0xA8, 0xD7, 0x66, 0xE2, 0xD1, 0x2B,
0x8D, 0x48, 0xD1, 0xE5, 0x8D, 0xF1, 0x73, 0x90, 0xB7, 0xF8, 0xA8, 0x49, 0xF3, 0x55, 0x0D, 0xF3,
0xFB, 0x79, 0x77, 0x3F, 0x1E, 0x42, 0x11, 0x17, 0xA6, 0x55, 0x45, 0x3B, 0xB0, 0x59, 0xCE, 0x78,
0xFB, 0x3F, 0x3C, 0x1F, 0xF0, 0xEA, 0x3F, 0x2F, 0x6A, 0x92, 0x83, 0xE7, 0x03, 0xF0, 0xD2, 0xD5,
0xC1, 0xF3, 0x01, 0x1B, 0x3E, 0x1B, 0xAC, 0xA8, 0x27, 0x3E, 0x13, 0xD7, 0xA1, 0x2E, 0x7F, 0x3E,
0xA0, 0x9D, 0x9C, 0x0F, 0x13, 0x16, 0x0C, 0x85, 0x2F, 0xFC, 0x2C, 0xBC, 0x6E, 0x25, 0x04, 0xDF,
0x12, 0x79, 0xD8, 0xE0, 0xF7, 0x9E, 0x51, 0x87, 0xB8, 0x2C, 0xFC, 0xE8, 0x52, 0xA3, 0x7A, 0x23,
0xF5, 0x7F, 0xEE, 0xDD, 0x93, 0x8C, 0xDF, 0x6D, 0x6E, 0x89, 0xED, 0x6E, 0x8C, 0xE1, 0x6E, 0x05,
0x9E, 0x76, 0x13, 0x70, 0x34, 0xE4, 0x67, 0x03, 0x15, 0xD1, 0x96, 0xCE, 0x15, 0x51, 0x51, 0x5F,
0x59, 0xFA, 0xC1, 0xD6, 0x01, 0xB6, 0x03, 0x96, 0x16, 0xEF, 0x28, 0x3C, 0xD7, 0x73, 0x8C, 0x3E,
0x04, 0xEC, 0x6E, 0xE4, 0x9B, 0xA8, 0x7B, 0xA5, 0x22, 0xEA, 0xEC, 0xA7, 0xD2, 0x77, 0x21, 0x91,
0x85, 0xE4, 0x0A, 0xBF, 0xC5, 0x2B, 0x23, 0xFA, 0x43, 0x73, 0x61, 0x46, 0x7A, 0x41, 0x06, 0x0C,
0xE9, 0x42, 0x94, 0x77, 0x2C, 0x4C, 0x7C, 0x1F, 0x01, 0xE7, 0x12, 0x19, 0x70, 0x94, 0x0A, 0xB0,
0xB0, 0x07, 0xE7, 0xCE, 0xE5, 0x92, 0x72, 0x85, 0xC2, 0x93, 0x62, 0x47, 0xCC, 0x18, 0x56, 0xAD,
0x3C, 0x96, 0x71, 0x28, 0x57, 0x38, 0x84, 0x07, 0x2F, 0x86, 0xAF, 0x40, 0xAD, 0x0B, 0xCD, 0xF5,
0xAB, 0xFA, 0x0E, 0xA4, 0xD5, 0x2B, 0x28, 0x4E, 0x95, 0x27, 0xFC, 0xE6, 0x6F, 0x62, 0x6B, 0x15,
0xEB, 0x84, 0xA8, 0x9C, 0xC1, 0x1A, 0xD9, 0xF7, 0x66, 0x64, 0x8D, 0x14, 0xFD, 0x9B, 0x1A, 0xC9,
0xC8, 0x16, 0xAE, 0x3F, 0x79, 0x51, 0x8D, 0x40, 0x5D, 0x4C, 0x96, 0x78, 0x52, 0x50, 0x2D, 0x28,
0xFE, 0x76, 0xC5, 0xFE, 0x2F, 0xD6, 0xC0, 0xAC, 0x93, 0x62, 0xFF, 0xEF, 0x1C, 0xAC, 0x81, 0xEE,
0xCE, 0xC1, 0x1A, 0x28, 0x7E, 0x33, 0xBC, 0x9D, 0x80, 0xC8, 0x81, 0xDC, 0x84, 0x1D, 0x4A, 0xEE,
0x5A, 0xDC, 0x49, 0xF0, 0x64, 0x03, 0xCE, 0x4D, 0x0A, 0x55, 0x67, 0xCF, 0xD3, 0x81, 0xB9, 0x0D,
0xD1, 0x0D, 0x20, 0xEE, 0xA5, 0x2B, 0xC2, 0x5F, 0x6C, 0xFD, 0x53, 0x42, 0xF7, 0x35, 0xFB, 0xB7,
0xA7, 0xE0, 0x06, 0x4D, 0x7F, 0x7E, 0x0A, 0x45, 0x07, 0x1A, 0xD3, 0x52, 0x94, 0xD9, 0x7C, 0x47,
0x53, 0x97, 0x92, 0xCF, 0x49, 0x51, 0x9E, 0x7D, 0x8F, 0x9C, 0x00, 0x1B, 0xD3, 0x18, 0xEB, 0x7B,
0x4F, 0x66, 0xF9, 0x94, 0xFB, 0xA0, 0xEE, 0x10, 0x37, 0x53, 0x74, 0xF4, 0x06, 0x47, 0x75, 0xE4,
0x41, 0xA6, 0xBF, 0xD0, 0xE4, 0x8E, 0xEA, 0xE0, 0x63, 0xDF, 0x25, 0x47, 0xBD, 0x9A, 0xF8, 0xB3,
0xF4, 0x61, 0x79, 0xAF, 0xFC, 0x9C, 0xEF, 0xBB, 0x10, 0x9E, 0xF9, 0xFA, 0x80, 0x3E, 0x80, 0x87,
0x2C, 0x3E, 0xC7, 0x43, 0x5F, 0xDE, 0xA4, 0x9B, 0xC9, 0xD9, 0xAF, 0x8F, 0xD0, 0x00, 0x79, 0x7A,
0x0D, 0xAE, 0xD0, 0xD4, 0x7A, 0x5B, 0x16, 0x2C, 0xBC, 0x0F, 0x8F, 0x82, 0x4C, 0x19, 0xB0, 0x74,
0x70, 0xA6, 0xBA, 0x00, 0xF7, 0xAD, 0xA5, 0x93, 0xBB, 0xB5, 0xAE, 0x9B, 0xFB, 0xBA, 0x49, 0xD0,
0x80, 0xD3, 0x18, 0x70, 0xEA, 0x04, 0xA7, 0x68, 0x70, 0x6A, 0x0F, 0x3E, 0xB1, 0x60, 0xA1, 0x98,
0xE6, 0x29, 0x17, 0x20, 0x1E, 0x18, 0x3F, 0x89, 0xC6, 0x00, 0x1A, 0xA1, 0x9B, 0xB9, 0xD1, 0x20,
0xE0, 0xDC, 0x5C, 0x44, 0x7E, 0xF3, 0xC9, 0xEF, 0x22, 0xF2, 0x3B, 0x8F, 0xFC, 0xCE, 0x21, 0xBF,
0x39, 0xE4, 0xD7, 0x43, 0x7E, 0x33, 0xC9, 0x6F, 0x06, 0xF9, 0x4D, 0x23, 0xBF, 0xA5, 0xE4, 0xD7,
0x45, 0x7E, 0x6D, 0xE4, 0xD7, 0x42, 0x7E, 0x0D, 0xE4, 0x57, 0x4B, 0x7E, 0x27, 0x93, 0xDF, 0x89,
0xE4, 0x37, 0x85, 0xFC, 0x26, 0x93, 0xDF, 0x24, 0xF8, 0xF5, 0xFB, 0xBB, 0x3F, 0x09, 0x85, 0x7A,
0x3E, 0x32, 0x87, 0x42, 0xFE, 0x2C, 0x4D, 0xCF, 0x61, 0x30, 0xF7, 0x9E, 0x2C, 0x49, 0xA5, 0x7A,
0xFE, 0xF4, 0x08, 0xBA, 0xF4, 0xF6, 0xBC, 0x69, 0x16, 0xCD, 0x57, 0xD1, 0x27, 0xF1, 0x41, 0xF0,
0xF9, 0x1D, 0xFA, 0xF8, 0x5B, 0x40, 0x0C, 0xE8, 0xD9, 0x82, 0x8E, 0x36, 0x74, 0x5C, 0x25, 0x05,
0x6F, 0x44, 0x97, 0x45, 0xE8, 0x52, 0x4A, 0x5C, 0x54, 0x3D, 0x55, 0xE8, 0x52, 0x87, 0x2E, 0xF7};

void test_fail_3()
{
    DianaGroupInfo * pGroupInfo=0;
    DianaParserResult result;
    
    int iRes = 0;

    DianaMemoryStream stream;
    DianaContext context;

    Diana_InitContext(&context, DIANA_MODE64);
    Diana_InitMemoryStream(&stream, g_testData3, sizeof(g_testData3));

    int i =0;
    for(; ; ++i)
    {
        iRes = Diana_ParseCmd(&context, Diana_GetRootLine(), &stream.parent,  &result);
        if (iRes == DI_END)
            break;
    }
}
void test_x64_integrated()
{
    test_x64_integrated_impl(g_Data, sizeof(g_Data), g_Names);
    test_x64_integrated_impl(g_Data2, sizeof(g_Data2), g_Names2);
    test_fail_3();
}